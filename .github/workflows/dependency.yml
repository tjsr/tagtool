name: Update dependency
run-name: ${{ github.actor }} Update an npm dependency
on:
  workflow_dispatch:
    inputs:
      package:
        type: choice
        description: 'Environment ID'
        required: true
        default: 'dev'
        options:
        - '@tjsr/user-session-middleware'
        - '@tjsr/mysql-pool-utils'
        - '@tjsr/simple-env-utils'
jobs:
  create-branch:
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      # Setup .npmrc file to publish to GitHub Packages
      - uses: actions/setup-node@v4
        with:
          node-version: 20.15.1
          registry-url: 'https://npm.pkg.github.com'
          # Defaults to the user or organization that owns the workflow file
          scope: '@tjsr'

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@main
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          # todo - change this so we are less restrictive on package-lock changes
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name:
        id: get-latest-version
        run: |
          LATEST_VERSION=`cat deptest.json | jq -r '.vite[] | select(.dependent == "${{ inputs.package }}") | .latest'`
          echo "latestVersion=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
          echo "branch=dependency/${{ inputs.package }}/$LATEST_VERSION" >> "$GITHUB_OUTPUT"

      - name:
        id: update-package
        run: |
          npm install --save-exact ${{ inputs.package }}@${{ steps.get-latest-version.outputs.latestVersion }}

      - name: Crete branch for selected package
        run: |
          git checkout -b ${{ steps.get-latest-version.outputs.branch }}
          git add package.json package-lock.json
          git commit -m "Update ${{ inputs.package }} to ${{ steps.get-latest-version.outputs.latestVersion }}"
          git push origin ${{ steps.get-latest-version.outputs.branch }}
