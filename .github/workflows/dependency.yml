name: Update dependency
run-name: ${{ github.actor }} Update the npm dependency for ${{ inputs.package }}
on:
  workflow_dispatch:
    inputs:
      package:
        type: choice
        description: 'Environment ID (required)'
        required: true
        default: 'dev'
        options:
        - '@tjsr/user-session-middleware'
        - '@tjsr/mysql-pool-utils'
        - '@tjsr/simple-env-utils'
        - '@tjsr/express-server-helper'
        - '@tjsr/testutils'
        - '@types/node'
        - 'vite'
      package-version:
        description: 'Package version to use (optional)'
        type: string
        required: false
  workflow_call:
    inputs:
      package:
        type: string
        required: true
      package-version:
        type: string
        required: false
  
jobs:
  create-branch:
    permissions:
      contents: write
      pull-requests: write
      packages: read

    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PROJECT: tagtool
      PACKAGE: ${{ inputs.package || '@types/node' }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      # Setup .npmrc file to publish to GitHub Packages
      - uses: actions/setup-node@v4
        with:
          node-version: 20.15.1
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
          # Defaults to the user or organization that owns the workflow file
          scope: '@tjsr'
      
      - name: Install npm 10.8.2
        run: npm install -g npm@10.8.2

      - name: Cache node modules
        id: cache-node_modules
        uses: actions/cache@main
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/node_modules
          # todo - change this so we are less restrictive on package-lock changes
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install ${{ env.PROJECT }} dependencies
        id: install
        run: npm ci

      - name: Get latest version for ${{ inputs.package }} on ${{ env.PROJECT }}
        id: get-latest-version
        if: ${{ inputs.package-version == '' }}
        uses: tjsr/action-npm-outdated@main
        with:
          project: ${{ env.PROJECT }}
          dependency: ${{ env.PACKAGE }}

      - name: Get version number to use
        id: get-version
        env:
          LATEST_VERSION: ${{ steps.get-latest-version.outputs.latest }}
          SPECIFIED_VERSION: ${{ inputs.package-version }}
        run: |
          if [ -z "$SPECIFIED_VERSION" ]; then
            if [ -z "$LATEST_VERSION" ]; then
              echo "No new version found for ${{ env.PACKAGE }}."
            else
              echo "Using version $LATEST_VERSION for ${{ env.PACKAGE }} retrieved from outdated."
              echo "hasNewVersion=true" >> "$GITHUB_OUTPUT"
              echo "version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "Using version $SPECIFIED_VERSION for ${{ env.PACKAGE }} provided in parameter."
            echo "hasNewVersion=true" >> "$GITHUB_OUTPUT"
            echo "version=$SPECIFIED_VERSION" >> "$GITHUB_OUTPUT"
          fi

      - name: Get target branch name
        id: get-branch
        env:
          VERSION: ${{ steps.get-version.outputs.version }}
        if: steps.get-version.outputs.hasNewVersion == 'true' || inputs.package-version != ''
        run: |
          echo "Value of get-version outputs is ${{ steps.get-version.outputs.version }}"
          if [ -z "$VERSION" ]; then
            echo "No new version found for ${{ env.PACKAGE }}."
          else
            echo "branch=dependency/${{ env.PACKAGE }}/$VERSION" >> "$GITHUB_OUTPUT"
          fi

      - name: Check if PR exists
        id: check-pr-exists
        if: steps.get-version.outputs.hasNewVersion == 'true' && steps.get-branch.outputs.branch != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          prs=$(gh pr list \
              --repo "$GITHUB_REPOSITORY" \
              --head '${{ steps.get-branch.outputs.branch }}' \
              )
          if ((prs > 0)); then
              echo "Branch already exists at dependency/${{ env.PACKAGE }}/$VERSION - no PR will be created."
              echo "exists=true" >> "$GITHUB_OUTPUT"
          else
              echo "PR will be created at dependency/${{ env.PACKAGE }}/$VERSION"
              echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Update ${{ env.PACKAGE }} via npm
        if: steps.get-version.outputs.hasNewVersion == 'true' && steps.check-pr-exists.outputs.exists == 'false'
        id: update-package
        run: |
          echo Installing updated npm depenency ${{ env.PACKAGE }}@${{ steps.get-version.outputs.version }}
          npm install --save ${{ env.PACKAGE }}@${{ steps.get-version.outputs.version }}

      - name: Extract base branch name
        id: base-branch
        shell: bash
        run: |
          BASE_BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "PR will be based off branch $BASE_BRANCH"
          echo "branch=$BASE_BRANCH" >> "$GITHUB_OUTPUT"
  
      - name: Create a Pull Request for the changes
        if: steps.get-version.outputs.hasNewVersion == 'true' && steps.check-pr-exists.outputs.exists == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: Update ${{ env.PACKAGE }} to ${{ steps.get-version.outputs.version }}
          title: Update ${{ env.PACKAGE }} to ${{ steps.get-version.outputs.version }}
          base: ${{ steps.base-branch.outputs.branch }}
          branch: ${{ steps.get-branch.outputs.branch }}
          reviewers: tjsr
