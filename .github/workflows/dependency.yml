name: Update dependency
run-name: ${{ github.actor }} Update an npm dependency
on:
  workflow_dispatch:
    inputs:
      package:
        type: choice
        description: 'Environment ID'
        required: true
        default: 'dev'
        options:
        - '@tjsr/user-session-middleware'
        - '@tjsr/mysql-pool-utils'
        - '@tjsr/simple-env-utils'
  push:
    branches:
    - 'workflow/dependency*'

jobs:
  create-branch:
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PROJECT: tagtool
      PACKAGE: ${{ inputs.package || '@tjsr/mysql-pool-utils' }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      # Setup .npmrc file to publish to GitHub Packages
      - uses: actions/setup-node@v4
        with:
          node-version: 20.15.1
          registry-url: 'https://npm.pkg.github.com'
          # Defaults to the user or organization that owns the workflow file
          scope: '@tjsr'

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@main
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          # todo - change this so we are less restrictive on package-lock changes
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install ${{ env.PROJECT }} dependencies
        id: install
        run: npm ci

      - name: Get latest version for ${{ env.PACKAGE }} on ${{ env.PROJECT }}
        id: get-latest-version
        env:
          PACKAGE: ${{ env.PACKAGE }}
          PROJECT: ${{ env.PROJECT }}
        run: |
          if [ -z "$PACKAGE" ]; then
              echo "Need to set PACKAGE"
              exit 1
          fi  

          if [ -z "$PROJECT" ]; then
              echo "Need to set PROJECT"
              exit 1
          fi

          set +e

          # echo "Running NPM..."
          # npm outdated --json --all $PACKAGE
          # echo "Got npm outdated, running assigned to var..."

          OUTDATED=`npm outdated --json --all $PACKAGE`
          echo "OUTDATED value: '$OUTDATED'"

          if [ -z "$OUTDATED" ] || [ "$OUTDATED" = "{}" ]; then
            echo "No new version found for $PACKAGE"
            echo "hasNewVersion=false" >> "$GITHUB_OUTPUT"
            exit 0
          else
            echo Found outated data: $OUTDATED
          fi

          echo "Getting PACKAGE_DEP" as jq from $OUTDATED
          OUTDATED=`echo $OUTDATED | jq -r ".\"$PACKAGE\"[]"`
          echo "Updated outdated: $OUTDATED"
          
          PACKAGE_DEP=$(echo "$OUTDATED" | jq -r --arg package "$PACKAGE" '
            .[$package] | if type == "array" then . else [.] end
          ')

          echo Package_dep: $PACKAGE_DEP
          PACKAGE_DEP=$(echo $OUTDATED | jq -r --arg project "$PROJECT" '
            .[] | select(.dependent == $project) | .latest
          '

          if [ -z "$PACKAGE_DEP" ] || [ "$PACKAGE_DEP" = "[]" ]; then
            echo "No direct dependency found for $PACKAGE in $PROJECT"
            exit 0
          else
            echo Found direct dependency: $PACKAGE_DEP
          fi

          LATEST_VERSION=`echo $PACKAGE_DEP | jq -r ".latest"`
          if [ -z "$LATEST_VERSION" ]; then
            echo "No new version found for $PACKAGE"
            echo "hasNewVersion=false" >> "$GITHUB_OUTPUT"
            exit 0
          else
            echo "New version found: $LATEST_VERSION"
          fi

          echo "New version found: $LATEST_VERSION"
          echo "hasNewVersion=true" >> "$GITHUB_OUTPUT"
          echo "latestVersion=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
          echo "branch=dependency/$PACKAGE/$LATEST_VERSION" >> "$GITHUB_OUTPUT"

      - name: Update ${{ env.PACKAGE }} via npm
        if: steps.get-latest-version.outputs.hasNewVersion == 'true'
        id: update-package
        run: |
          npm install --save-exact ${{ env.PACKAGE }}@${{ steps.get-latest-version.outputs.latestVersion }}

      - name: Crete branch and commit package[-lock].json to ${{ steps.get-latest-version.outputs.branch }}
        if: steps.get-latest-version.outputs.hasNewVersion == 'true'
        id: crete-branch
        run: |
          git checkout -b ${{ steps.get-latest-version.outputs.branch }}
          git add package.json package-lock.json
          git commit -m "Update ${{ env.PACKAGE }} to ${{ steps.get-latest-version.outputs.latestVersion }}"
          git push origin ${{ steps.get-latest-version.outputs.branch }}

      - name: Create github PR ${{ steps.get-latest-version.outputs.branch }}
        if: steps.get-latest-version.outputs.hasNewVersion == 'true'
        id: create-pr
        run: |
          gh pr create \
            --title "Update ${{ env.PACKAGE }} to ${{ steps.get-latest-version.outputs.latestVersion }}" \
            --body "Update ${{ env.PACKAGE }} to ${{ steps.get-latest-version.outputs.latestVersion }}" \
            --base main --head ${{ steps.get-latest-version.outputs.branch }}
