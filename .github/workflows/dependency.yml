name: Update dependency
run-name: ${{ github.actor }} Update an npm dependency
on:
  workflow_dispatch:
    inputs:
      package:
        type: choice
        description: 'Environment ID'
        required: true
        default: 'dev'
        options:
        - '@tjsr/user-session-middleware'
        - '@tjsr/mysql-pool-utils'
        - '@tjsr/simple-env-utils'
        - '@types/node'
        - 'vite'
  push:
    branches:
    - 'workflow/dependency*'

jobs:
  create-branch:
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PROJECT: tagtool
      PACKAGE: ${{ inputs.package || '@types/node' }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      # Setup .npmrc file to publish to GitHub Packages
      - uses: actions/setup-node@v4
        with:
          node-version: 20.15.1
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
          # Defaults to the user or organization that owns the workflow file
          scope: '@tjsr'

      - name: Cache node modules
        id: cache-node_modules
        uses: actions/cache@main
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/node_modules
          # todo - change this so we are less restrictive on package-lock changes
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install ${{ env.PROJECT }} dependencies
        id: install
        run: npm ci

      - name: List all npm dependencies
        run: npm ls --all

      - name: Get latest version for ${{ inputs.package }} on ${{ env.PROJECT }}
        id: get-latest-version
        uses: tjsr/action-npm-outdated@develop/debug-outdated-output
        with:
          project: ${{ env.PROJECT }}
          dependency: ${{ env.PACKAGE }}

      - name: Get target branch name
        id: get-branch
        if: steps.get-latest-version.outputs.hasNewVersion == 'true'
        run: echo "branch=dependency/${{ env.PACKAGE }}/$LATEST_VERSION" >> "$GITHUB_OUTPUT"

      - name: Update ${{ env.PACKAGE }} via npm
        if: steps.get-latest-version.outputs.hasNewVersion == 'true'
        id: update-package
        run: |
          npm install --save-exact ${{ env.PACKAGE }}@${{ steps.get-latest-version.outputs.latest }}

      - name: Crete branch and commit package[-lock].json to branch.
        if: steps.get-latest-version.outputs.hasNewVersion == 'true'
        id: crete-branch
        run: |
          git checkout -b ${{ steps.get-branch.outputs.branch }}
          git add package.json package-lock.json
          git commit -m "Update ${{ env.PACKAGE }} to ${{ steps.get-latest-version.outputs.latest }}"
          git push origin ${{ steps.get-branch.outputs.branch }}

      - name: Create github PR for branch.
        if: steps.get-latest-version.outputs.hasNewVersion == 'true'
        id: create-pr
        run: |
          gh pr create \
            --title "Update ${{ env.PACKAGE }} to ${{ steps.get-latest-version.outputs.latest }}" \
            --body "Update ${{ env.PACKAGE }} to ${{ steps.get-latest-version.outputs.latest }}" \
            --base main --head ${{ steps.get-branch.outputs.branch }}
